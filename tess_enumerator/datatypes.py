import enum
import typing

import numpy as np

from astropy.io import fits

T = typing.TypeVar('T')

class PaymentSolution(enum.Enum):
    AWSRequestPayer = 'aws-request-payer'

class CloudService(enum.Enum):
    S3 = 'amazon-web-services-static-storage-service'
    ObjectStorage = 'google-cloud-platform-object-storage'
    BlobStorage = 'azure-blob-storage'
    Spaces = 'digital-ocean-spaces'

class FITSHeader(typing.NamedTuple):
    offset: int
    stop: int
    data_offset: int
    data_stop: int
    fits: fits.Header

    def clone(self) -> T:
        return self.__class__(self.offset, self.stop, self.data_offset, self.data_stop, fits.Header(self.fits, True))

    def as_string(self) -> str:
        new_header = fits.Header(self.fits, True)
        new_header['MESSAGE'] = new_header.get('MESSAGE', '') + 'Generated by tess-enumerator'
        return new_header.tostring()
